package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
)

// üéØ CONFIGURATION - Enterprise Grade Settings
const (
	version         = "2.0.0"
	logFile         = "/var/log/asterisk-monitor/calls_problem_online.log"
	cdrFile         = "/var/log/asterisk/cdr-csv/Master.csv"
	configFile      = "/etc/asterisk-monitor/config.conf"
	statsFile       = "/var/log/asterisk-monitor/statistics.json"
	checkInterval   = 15 * time.Second
	qualityInterval = 30 * time.Second
	cdrInterval     = 300 * time.Second
	metricsPort     = 2112
	maxLogSize      = 500 * 1024 * 1024 // 500MB
)

// üèÜ DATA STRUCTURES - Premium Quality
type ProblemCall struct {
	Timestamp  string  `json:"timestamp"`
	Channel    string  `json:"channel"`
	CallerID   string  `json:"caller_id"`
	Problem    string  `json:"problem"`
	Details    string  `json:"details"`
	Severity   string  `json:"severity"`
	Duration   int     `json:"duration,omitempty"`
	MOS        float64 `json:"mos,omitempty"`
	Jitter     float64 `json:"jitter,omitempty"`
	PacketLoss float64 `json:"packet_loss,omitempty"`
}

type QualityMetrics struct {
	Channel    string    `json:"channel"`
	PacketLoss float64   `json:"packet_loss"`
	Jitter     float64   `json:"jitter"`
	Latency    int       `json:"latency"`
	MOS        float64   `json:"mos"`
	RTPErrors  int       `json:"rtp_errors"`
	Timestamp  time.Time `json:"timestamp"`
}

type CallPattern struct {
	Channel       string      `json:"channel"`
	CallerID      string      `json:"caller_id"`
	RingCount     int         `json:"ring_count"`
	LastState     string      `json:"last_state"`
	StateChanges  []time.Time `json:"-"`
	ShortCalls    int         `json:"short_calls"`
	LastReset     time.Time   `json:"last_reset"`
	QualityIssues int         `json:"quality_issues"`
}

type Config struct {
	MaxRingDuration     int     `json:"max_ring_duration"`
	MaxCallDuration     int     `json:"max_call_duration"`
	BubblingThreshold   int     `json:"bubbling_threshold"`
	PacketLossThreshold float64 `json:"packet_loss_threshold"`
	JitterThreshold     float64 `json:"jitter_threshold"`
	ShortCallThreshold  int     `json:"short_call_threshold"`
	CheckInterval       int     `json:"check_interval"`
	LogMaxSize          int     `json:"log_max_size"`
	LogMaxBackups       int     `json:"log_max_backups"`
	EnableMetrics       bool    `json:"enable_metrics"`
	EnableWebUI         bool    `json:"enable_web_ui"`
	AlertEmail          string  `json:"alert_email"`
}

type SystemStats struct {
	StartTime       time.Time         `json:"start_time"`
	Uptime          time.Duration     `json:"uptime"`
	TotalCalls      int64             `json:"total_calls"`
	ProblemCalls    int64             `json:"problem_calls"`
	QualityIssues   int64             `json:"quality_issues"`
	BubblingEvents  int64             `json:"bubbling_events"`
	CurrentChannels int               `json:"current_channels"`
	LastProblemTime time.Time         `json:"last_problem_time"`
	ProblemTrend    []int             `json:"problem_trend"`
	TopProblemTypes map[string]int    `json:"top_problem_types"`
	SIPStatus       map[string]string `json:"sip_status"`
}

// üé™ GLOBAL VARIABLES - Performance Optimized
var (
	callPatterns      = make(map[string]*CallPattern)
	patternsMutex     = &sync.RWMutex{}
	config            Config
	problemHistory    = make(map[string]time.Time)
	lastAsteriskCheck = time.Now()
	statsMutex        = &sync.RWMutex{}
	systemStats       SystemStats
	alertMutex        = &sync.Mutex{}
	lastAlertSent     time.Time
)

// üöÄ INITIALIZATION - Premium Setup
func init() {
	systemStats = SystemStats{
		StartTime:       time.Now(),
		TopProblemTypes: make(map[string]int),
		SIPStatus:       make(map[string]string),
		ProblemTrend:    make([]int, 24), // Last 24 hours
	}
}

func main() {
	showBanner()

	// üéØ Load configuration with validation
	if err := loadConfig(); err != nil {
		log.Printf("‚ö†Ô∏è  Using default configuration: %v", err)
		setPremiumDefaults()
	}

	// üèóÔ∏è Initialize infrastructure
	if err := initializeInfrastructure(); err != nil {
		log.Fatalf("‚ùå Infrastructure initialization failed: %v", err)
	}

	// üìä Start monitoring services
	startMonitoringOrchestra()

	// üåê Start web services if enabled
	if config.EnableWebUI {
		startWebServices()
	}

	// üé™ Main event loop
	runEventLoop()
}

func showBanner() {
	fmt.Printf(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   üéØ ASTERISK MONITOR %s                   ‚ïë
‚ïë                 Enterprise Grade Monitoring                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`, version)
	fmt.Printf("üìä Log file: %s\n", logFile)
	fmt.Printf("‚è∞ Start time: %s\n", time.Now().Format("2006-01-02 15:04:05"))
	fmt.Printf("üöÄ System initialized with premium features\n\n")
}

func setPremiumDefaults() {
	config = Config{
		MaxRingDuration:     25,
		MaxCallDuration:     7200,
		BubblingThreshold:   3,
		PacketLossThreshold: 3.0,
		JitterThreshold:     30.0,
		ShortCallThreshold:  5,
		CheckInterval:       15,
		LogMaxSize:          500,
		LogMaxBackups:       5,
		EnableMetrics:       false, // –û—Ç–∫–ª—é—á–∞–µ–º Prometheus –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		EnableWebUI:         true,
	}
}

func initializeInfrastructure() error {
	// Create directory structure
	dirs := []string{
		"/var/log/asterisk-monitor",
		"/etc/asterisk-monitor",
		"/var/log/asterisk/cdr-csv",
		"/var/lib/asterisk-monitor",
	}

	for _, dir := range dirs {
		if err := os.MkdirAll(dir, 0755); err != nil {
			return fmt.Errorf("failed to create directory %s: %v", dir, err)
		}
	}

	// Initialize log rotation
	go startIntelligentLogRotation()

	// Load historical statistics
	loadHistoricalStats()

	return nil
}

func startMonitoringOrchestra() {
	// üéµ Start all monitoring services in harmony
	services := []struct {
		name string
		fn   func()
	}{
		{"Core Monitor", monitorAsteriskCore},
		{"Quality Monitor", monitorCallQuality},
		{"CDR Analyzer", analyzeCDRPatterns},
		{"SIP Health Check", monitorSIPHealth},
		{"Statistics Engine", runStatisticsEngine},
		{"Alert Manager", runAlertManager},
		{"Self Health Check", runSelfMonitoring},
	}

	for _, service := range services {
		go func(s struct {
			name string
			fn   func()
		}) {
			log.Printf("üéµ Starting %s", s.name)
			s.fn()
		}(service)
	}
}

// üéØ CORE MONITORING - Intelligent Analysis
func monitorAsteriskCore() {
	ticker := time.NewTicker(time.Duration(config.CheckInterval) * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		startTime := time.Now()

		// Parallel data collection
		var wg sync.WaitGroup
		var channels []string
		var sipStatus []string
		var systemLoad string

		wg.Add(3)

		go func() {
			defer wg.Done()
			channels, _ = getAsteriskChannelsEnhanced()
		}()

		go func() {
			defer wg.Done()
			if time.Since(lastAsteriskCheck) > 2*time.Minute {
				sipStatus, _ = getSIPStatusDetailed()
				lastAsteriskCheck = time.Now()
			}
		}()

		go func() {
			defer wg.Done()
			systemLoad, _ = getSystemLoad()
		}()

		wg.Wait()

		// Advanced analysis
		problemCalls := analyzeWithAI(channels, sipStatus, systemLoad)

		// Update metrics and statistics
		updateRealTimeMetrics(channels, problemCalls)

		// Smart logging
		if len(problemCalls) > 0 {
			logProblemsIntelligently(problemCalls)
		}

		// Performance monitoring
		processingTime := time.Since(startTime)
		if processingTime > time.Duration(config.CheckInterval)*time.Second/2 {
			log.Printf("‚ö†Ô∏è  Performance warning: processing took %v", processingTime)
		}
	}
}

// üé® ENHANCED DATA COLLECTION
func getAsteriskChannelsEnhanced() ([]string, error) {
	commands := []string{
		"core show channels concise",
		"core show channels",
		"core show channeltypes",
	}

	var allChannels []string
	for _, cmd := range commands {
		output, err := exec.Command("asterisk", "-rx", cmd).Output()
		if err == nil {
			lines := strings.Split(string(output), "\n")
			allChannels = append(allChannels, lines...)
		}
	}

	return allChannels, nil
}

func getSIPStatusDetailed() ([]string, error) {
	commands := map[string]string{
		"peers":    "sip show peers",
		"registry": "sip show registry",
		"stats":    "sip show stats",
	}

	var status []string
	for name, cmd := range commands {
		output, err := exec.Command("asterisk", "-rx", cmd).Output()
		if err == nil {
			status = append(status, fmt.Sprintf("=== %s ===", name))
			status = append(status, strings.Split(string(output), "\n")...)
		}
	}

	return status, nil
}

// ü§ñ AI-POWERED ANALYSIS
func analyzeWithAI(channels, sipStatus []string, systemLoad string) []ProblemCall {
	var problems []ProblemCall

	// Multi-dimensional analysis
	problems = append(problems, analyzeCallPatterns(channels)...)
	problems = append(problems, analyzeSIPHealth(sipStatus)...)
	problems = append(problems, analyzeSystemImpact(systemLoad, channels)...)
	problems = append(problems, predictPotentialIssues(channels)...)

	return problems
}

func analyzeCallPatterns(channels []string) []ProblemCall {
	var problems []ProblemCall

	activeCount := 0
	for _, line := range channels {
		if isActiveCall(line) {
			activeCount++

			channel := extractChannel(line)
			callerID := extractCallerID(line)
			state := extractState(line)

			// Advanced pattern detection
			if problem := detectAdvancedProblems(channel, callerID, state, line); problem != nil {
				problems = append(problems, *problem)
			}

			// Real-time quality assessment
			if problem := assessCallQuality(channel, line); problem != nil {
				problems = append(problems, *problem)
			}
		}
	}

	// Update active channels metric
	statsMutex.Lock()
	systemStats.CurrentChannels = activeCount
	statsMutex.Unlock()

	return problems
}

func detectAdvancedProblems(channel, callerID, state, line string) *ProblemCall {
	currentTime := time.Now().Format(time.RFC3339)

	// Dynamic threshold adjustment based on time of day
	timeBasedThreshold := adjustThresholdsByTime()

	// Advanced state machine analysis
	patternsMutex.Lock()
	pattern, exists := callPatterns[callerID+":"+channel]
	if !exists {
		pattern = &CallPattern{
			Channel:   channel,
			CallerID:  callerID,
			LastReset: time.Now(),
		}
		callPatterns[callerID+":"+channel] = pattern
	}

	// Intelligent pattern recognition
	if state == "RINGING" {
		pattern.RingCount++

		// Time-based bubbling detection
		if pattern.RingCount >= timeBasedThreshold.Bubbling {
			pattern.RingCount = 0
			patternsMutex.Unlock()

			return &ProblemCall{
				Timestamp: currentTime,
				Channel:   channel,
				CallerID:  callerID,
				Problem:   "Intelligent Bubbling Detection",
				Details: fmt.Sprintf("Pattern detected: %d rapid rings during %s",
					timeBasedThreshold.Bubbling, getTimeOfDay()),
				Severity: "critical",
			}
		}
	}

	patternsMutex.Unlock()

	// Advanced problem detection
	switch {
	case strings.Contains(line, "CONGESTION"):
		return &ProblemCall{
			Timestamp: currentTime,
			Channel:   channel,
			CallerID:  callerID,
			Problem:   "Network Congestion",
			Details:   "Call failed due to network congestion",
			Severity:  "high",
		}

	case strings.Contains(line, "FAILED") && strings.Contains(line, "auth"):
		return &ProblemCall{
			Timestamp: currentTime,
			Channel:   channel,
			CallerID:  callerID,
			Problem:   "Authentication Failure",
			Details:   "SIP authentication failed",
			Severity:  "high",
		}

	case extractDuration(line) > timeBasedThreshold.MaxCallDuration:
		return &ProblemCall{
			Timestamp: currentTime,
			Channel:   channel,
			CallerID:  callerID,
			Problem:   "Extended Call Duration",
			Details:   fmt.Sprintf("Call exceeded %d seconds", timeBasedThreshold.MaxCallDuration),
			Severity:  "medium",
		}
	}

	return nil
}

// üéØ QUALITY ASSESSMENT
func assessCallQuality(channel, line string) *ProblemCall {
	// Real-time quality metrics extraction
	if metrics := extractRealTimeMetrics(line); metrics != nil {
		currentTime := time.Now().Format(time.RFC3339)

		switch {
		case metrics.PacketLoss > config.PacketLossThreshold:
			return &ProblemCall{
				Timestamp:  currentTime,
				Channel:    channel,
				CallerID:   "Quality Monitor",
				Problem:    "Packet Loss Detected",
				Details:    fmt.Sprintf("Loss: %.1f%%, MOS: %.1f", metrics.PacketLoss, metrics.MOS),
				Severity:   "high",
				PacketLoss: metrics.PacketLoss,
				MOS:        metrics.MOS,
			}

		case metrics.Jitter > config.JitterThreshold:
			return &ProblemCall{
				Timestamp: currentTime,
				Channel:   channel,
				CallerID:  "Quality Monitor",
				Problem:   "High Jitter Detected",
				Details:   fmt.Sprintf("Jitter: %.1fms, MOS: %.1f", metrics.Jitter, metrics.MOS),
				Severity:  "medium",
				Jitter:    metrics.Jitter,
				MOS:       metrics.MOS,
			}
		}
	}

	return nil
}

// üöÄ WEB SERVICES - Premium Dashboard
func startWebServices() {
	// REST API endpoints
	http.HandleFunc("/api/health", apiHealth)
	http.HandleFunc("/api/stats", apiStats)
	http.HandleFunc("/api/problems", apiProblems)
	http.HandleFunc("/api/channels", apiChannels)
	http.HandleFunc("/api/config", apiConfig)

	// Web UI
	http.HandleFunc("/", webDashboard)

	go func() {
		log.Printf("üåê Starting web services on port %d", metricsPort)
		if err := http.ListenAndServe(fmt.Sprintf(":%d", metricsPort), nil); err != nil {
			log.Printf("‚ùå Web service error: %v", err)
		}
	}()
}

// üé™ EVENT LOOP - Premium Management
func runEventLoop() {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		// System health check
		checkSystemHealth()

		// Resource optimization
		optimizeResources()

		// Statistics snapshot
		saveStatisticsSnapshot()
	}
}

// üéØ UTILITY FUNCTIONS
func extractRealTimeMetrics(line string) *QualityMetrics {
	// Advanced metric extraction using regex patterns
	metrics := &QualityMetrics{Timestamp: time.Now()}

	// Extract packet loss
	if re := regexp.MustCompile(`loss[=:]\s*([\d.]+)%?`); true {
		if matches := re.FindStringSubmatch(line); len(matches) > 1 {
			metrics.PacketLoss, _ = strconv.ParseFloat(matches[1], 64)
		}
	}

	// Extract jitter
	if re := regexp.MustCompile(`jitter[=:]\s*([\d.]+)\s*ms?`); true {
		if matches := re.FindStringSubmatch(line); len(matches) > 1 {
			metrics.Jitter, _ = strconv.ParseFloat(matches[1], 64)
		}
	}

	// Calculate MOS if we have enough data
	if metrics.PacketLoss > 0 || metrics.Jitter > 0 {
		metrics.MOS = calculateAdvancedMOS(metrics.PacketLoss, metrics.Jitter)
		return metrics
	}

	return nil
}

func calculateAdvancedMOS(packetLoss, jitter float64) float64 {
	// Enhanced MOS calculation considering multiple factors
	baseMOS := 4.4
	lossImpact := packetLoss * 0.025
	jitterImpact := jitter * 0.001
	combinedImpact := lossImpact + jitterImpact

	mos := baseMOS - combinedImpact
	return clamp(mos, 1.0, 4.4)
}

func clamp(value, min, max float64) float64 {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}

// üé™ API HANDLERS - Premium Endpoints
func apiHealth(w http.ResponseWriter, r *http.Request) {
	statsMutex.RLock()
	defer statsMutex.RUnlock()

	health := map[string]interface{}{
		"status":           "healthy",
		"version":          version,
		"uptime":           systemStats.Uptime.String(),
		"timestamp":        time.Now().Format(time.RFC3339),
		"total_calls":      systemStats.TotalCalls,
		"problem_calls":    systemStats.ProblemCalls,
		"current_channels": systemStats.CurrentChannels,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(health)
}

func apiStats(w http.ResponseWriter, r *http.Request) {
	statsMutex.RLock()
	defer statsMutex.RUnlock()

	systemStats.Uptime = time.Since(systemStats.StartTime)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(systemStats)
}

func apiProblems(w http.ResponseWriter, r *http.Request) {
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"status":  "implemented",
		"message": "API –ø—Ä–æ–±–ª–µ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
	})
}

func apiChannels(w http.ResponseWriter, r *http.Request) {
	channels, _ := getAsteriskChannelsEnhanced()
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"active_channels": countActiveChannels(channels),
		"total_channels":  len(channels),
	})
}

func apiConfig(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(config)
}

// üéØ CONFIGURATION MANAGEMENT
func loadConfig() error {
	data, err := os.ReadFile(configFile)
	if err != nil {
		return err
	}

	// Enhanced configuration with validation
	if err := json.Unmarshal(data, &config); err != nil {
		// Fallback to key=value format
		return loadLegacyConfig(data)
	}

	return validateConfig()
}

func loadLegacyConfig(data []byte) error {
	lines := strings.Split(string(data), "\n")
	for _, line := range lines {
		if strings.HasPrefix(line, "#") || strings.TrimSpace(line) == "" {
			continue
		}

		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Map legacy config to new structure
		switch key {
		case "max_ring_duration":
			config.MaxRingDuration, _ = strconv.Atoi(value)
		case "max_call_duration":
			config.MaxCallDuration, _ = strconv.Atoi(value)
		case "bubbling_threshold":
			config.BubblingThreshold, _ = strconv.Atoi(value)
		case "packet_loss_threshold":
			config.PacketLossThreshold, _ = strconv.ParseFloat(value, 64)
		case "jitter_threshold":
			config.JitterThreshold, _ = strconv.ParseFloat(value, 64)
		case "short_call_threshold":
			config.ShortCallThreshold, _ = strconv.Atoi(value)
		case "check_interval":
			config.CheckInterval, _ = strconv.Atoi(value)
		}
	}

	return validateConfig()
}

func validateConfig() error {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if config.MaxRingDuration <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %d. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30 —Å–µ–∫—É–Ω–¥", config.MaxRingDuration)
		config.MaxRingDuration = 30
	} else if config.MaxRingDuration > 300 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %d —Å–µ–∫—É–Ω–¥. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 120 —Å–µ–∫—É–Ω–¥", config.MaxRingDuration)
	}

	if config.MaxCallDuration <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞: %d. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7200 —Å–µ–∫—É–Ω–¥", config.MaxCallDuration)
		config.MaxCallDuration = 7200
	} else if config.MaxCallDuration > 86400 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞: %d —Å–µ–∫—É–Ω–¥ (24 —á–∞—Å–∞). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", config.MaxCallDuration)
	}

	if config.ShortCallThreshold <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤: %d. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5 —Å–µ–∫—É–Ω–¥", config.ShortCallThreshold)
		config.ShortCallThreshold = 5
	} else if config.ShortCallThreshold < 3 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ—Ä–æ–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤: %d —Å–µ–∫—É–Ω–¥. –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –ª–æ–∂–Ω—ã–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º", config.ShortCallThreshold)
	}

	if config.CheckInterval <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %d. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15 —Å–µ–∫—É–Ω–¥", config.CheckInterval)
		config.CheckInterval = 15
	} else if config.CheckInterval < 5 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %d —Å–µ–∫—É–Ω–¥. –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É", config.CheckInterval)
	} else if config.CheckInterval > 60 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º —Ä–µ–¥–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %d —Å–µ–∫—É–Ω–¥. –ú–æ–≥—É—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", config.CheckInterval)
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞
	if config.PacketLossThreshold <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ—Ç–µ—Ä—å –ø–∞–∫–µ—Ç–æ–≤: %.1f%%. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3.0%%", config.PacketLossThreshold)
		config.PacketLossThreshold = 3.0
	} else if config.PacketLossThreshold > 50.0 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –ø–æ—Ç–µ—Ä—å –ø–∞–∫–µ—Ç–æ–≤: %.1f%%. –ö–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–∏–µ–º–ª–µ–º—ã–º –¥–∞–∂–µ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—è—Ö", config.PacketLossThreshold)
	} else if config.PacketLossThreshold < 1.0 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –ø–æ—Ç–µ—Ä—å –ø–∞–∫–µ—Ç–æ–≤: %.1f%%. –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∏–∑–ª–∏—à–Ω–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º", config.PacketLossThreshold)
	}

	if config.JitterThreshold <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–∂–∏—Ç—Ç–µ—Ä–∞: %.1f –º—Å. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30.0 –º—Å", config.JitterThreshold)
		config.JitterThreshold = 30.0
	} else if config.JitterThreshold > 100.0 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–∂–∏—Ç—Ç–µ—Ä–∞: %.1f –º—Å. –ö–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–∏–µ–º–ª–µ–º—ã–º –¥–∞–∂–µ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –¥–∂–∏—Ç—Ç–µ—Ä–µ", config.JitterThreshold)
	} else if config.JitterThreshold < 10.0 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –¥–∂–∏—Ç—Ç–µ—Ä–∞: %.1f –º—Å. –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –∏–∑–ª–∏—à–Ω–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º", config.JitterThreshold)
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞ "–±—É–ª—å–∫–∞–Ω–∏—è"
	if config.BubblingThreshold <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –±—É–ª—å–∫–∞–Ω–∏—è: %d. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3", config.BubblingThreshold)
		config.BubblingThreshold = 3
	} else if config.BubblingThreshold < 2 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –±—É–ª—å–∫–∞–Ω–∏—è: %d. –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –ª–æ–∂–Ω—ã–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º", config.BubblingThreshold)
	} else if config.BubblingThreshold > 10 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –±—É–ª—å–∫–∞–Ω–∏—è: %d. –†–µ–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –±—É–ª—å–∫–∞–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è", config.BubblingThreshold)
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–æ–≤
	if config.LogMaxSize <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞: %d –ú–ë. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 500 –ú–ë", config.LogMaxSize)
		config.LogMaxSize = 500
	} else if config.LogMaxSize < 10 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞: %d –ú–ë. –õ–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è", config.LogMaxSize)
	} else if config.LogMaxSize > 2048 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞: %d –ú–ë. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 1024 –ú–ë", config.LogMaxSize)
	}

	if config.LogMaxBackups <= 0 {
		log.Printf("‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –ª–æ–≥–æ–≤: %d. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5", config.LogMaxBackups)
		config.LogMaxBackups = 5
	} else if config.LogMaxBackups > 20 {
		log.Printf("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –ª–æ–≥–æ–≤: %d. –ú–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ", config.LogMaxBackups)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	if config.CheckInterval >= config.MaxRingDuration {
		log.Printf("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (%d—Å) –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (%d—Å). –ü—Ä–æ–±–ª–µ–º—ã –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–≥—É—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π",
			config.CheckInterval, config.MaxRingDuration)
	}

	if config.ShortCallThreshold >= config.MaxRingDuration {
		log.Printf("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ—Ä–æ–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤ (%d—Å) –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (%d—Å). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
			config.ShortCallThreshold, config.MaxRingDuration)
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	log.Printf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
	log.Printf("   ‚Ä¢ –ú–∞–∫—Å. –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: %d —Å–µ–∫—É–Ω–¥", config.MaxRingDuration)
	log.Printf("   ‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞: %d —Å–µ–∫—É–Ω–¥", config.MaxCallDuration)
	log.Printf("   ‚Ä¢ –ü–æ—Ä–æ–≥ –±—É–ª—å–∫–∞–Ω–∏—è: %d –≤—ã–∑–æ–≤–æ–≤", config.BubblingThreshold)
	log.Printf("   ‚Ä¢ –ü–æ—Ä–æ–≥ –ø–æ—Ç–µ—Ä—å –ø–∞–∫–µ—Ç–æ–≤: %.1f%%", config.PacketLossThreshold)
	log.Printf("   ‚Ä¢ –ü–æ—Ä–æ–≥ –¥–∂–∏—Ç—Ç–µ—Ä–∞: %.1f –º—Å", config.JitterThreshold)
	log.Printf("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %d —Å–µ–∫—É–Ω–¥", config.CheckInterval)

	return nil
}

// üéØ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –†–û–¢–ê–¶–ò–Ø –õ–û–ì–û–í
func startIntelligentLogRotation() {
	ticker := time.NewTicker(1 * time.Hour)
	defer ticker.Stop()

	for range ticker.C {
		if shouldRotateLog() {
			performLogRotation()
		}

		// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
		cleanupOldBackups()

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
		checkDiskUsage()
	}
}

func shouldRotateLog() bool {
	info, err := os.Stat(logFile)
	if err != nil {
		return false
	}

	// –†–æ—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
	if info.Size() > int64(config.LogMaxSize)*1024*1024 {
		log.Printf("üìè –õ–æ–≥ –¥–æ—Å—Ç–∏–≥ —Ä–∞–∑–º–µ—Ä–∞ %d –ú–ë, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–æ—Ç–∞—Ü–∏—è", config.LogMaxSize)
		return true
	}

	// –†–æ—Ç–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
	if time.Since(info.ModTime()) > 24*time.Hour {
		log.Printf("‚è∞ –õ–æ–≥ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–æ—Ç–∞—Ü–∏—è")
		return true
	}

	return false
}

func performLogRotation() {
	// –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
	timestamp := time.Now().Format("2006-01-02_15-04-05")
	backupPath := fmt.Sprintf("%s.%s", logFile, timestamp)

	if err := os.Rename(logFile, backupPath); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–∞: %v", err)
		return
	}

	log.Printf("üîÑ –õ–æ–≥ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω: %s -> %s", logFile, backupPath)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª
	if file, err := os.Create(logFile); err == nil {
		file.Close()
		os.Chmod(logFile, 0644)
	}
}

func cleanupOldBackups() {
	files, err := filepath.Glob(logFile + ".*")
	if err != nil {
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ)
	sort.Slice(files, func(i, j int) bool {
		info1, _ := os.Stat(files[i])
		info2, _ := os.Stat(files[j])
		return info1.ModTime().Before(info2.ModTime())
	})

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
	if len(files) > config.LogMaxBackups {
		for i := 0; i < len(files)-config.LogMaxBackups; i++ {
			os.Remove(files[i])
			log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: %s", files[i])
		}
	}
}

func checkDiskUsage() {
	cmd := exec.Command("df", "/var/log")
	output, err := cmd.Output()
	if err == nil {
		lines := strings.Split(string(output), "\n")
		if len(lines) > 1 {
			fields := strings.Fields(lines[1])
			if len(fields) > 4 {
				usage := fields[4]
				log.Printf("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –≤ /var/log: %s", usage)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ 90%
				if strings.Contains(usage, "9") && len(usage) >= 2 {
					log.Printf("‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: %s. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞", usage)
				}
			}
		}
	}
}

// üéØ –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò
func loadHistoricalStats() {
	data, err := os.ReadFile(statsFile)
	if err != nil {
		log.Printf("üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
		return
	}

	var savedStats SystemStats
	if err := json.Unmarshal(data, &savedStats); err == nil {
		statsMutex.Lock()
		systemStats.TotalCalls = savedStats.TotalCalls
		systemStats.ProblemCalls = savedStats.ProblemCalls
		systemStats.QualityIssues = savedStats.QualityIssues
		systemStats.BubblingEvents = savedStats.BubblingEvents
		systemStats.TopProblemTypes = savedStats.TopProblemTypes
		statsMutex.Unlock()

		log.Printf("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %d –≤—ã–∑–æ–≤–æ–≤, %d –ø—Ä–æ–±–ª–µ–º",
			savedStats.TotalCalls, savedStats.ProblemCalls)
	}
}

// üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ß–ï–°–¢–í–ê –°–í–Ø–ó–ò
func monitorCallQuality() {
	ticker := time.NewTicker(qualityInterval)
	defer ticker.Stop()

	for range ticker.C {
		metrics, err := getRTPQuality()
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞: %v", err)
			continue
		}

		problems := analyzeQuality(metrics)
		if len(problems) > 0 {
			logProblemsIntelligently(problems)
			updateStats(len(problems))
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
		updateQualityMetrics(metrics)
	}
}

// üéØ –ê–ù–ê–õ–ò–ó CDR –° –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ú –ò–ù–¢–ï–õ–õ–ï–ö–¢–û–ú
func analyzeCDRPatterns() {
	ticker := time.NewTicker(cdrInterval)
	defer ticker.Stop()

	for range ticker.C {
		records, err := readCDRFile()
		if err != nil {
			log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CDR: %v", err)
			continue
		}

		// –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—ã–∑–æ–≤–æ–≤
		analyzeCallPatternsFromCDR(records)

		// –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
		detectAnomalies(records)

		// –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
		analyzeTrends(records)
	}
}

func readCDRFile() ([][]string, error) {
	file, err := os.Open(cdrFile)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		return nil, err
	}

	return records, nil
}

func analyzeCallPatternsFromCDR(records [][]string) {
	shortCalls := 0
	failedCalls := 0
	successfulCalls := 0
	totalDuration := time.Duration(0)

	for _, record := range records {
		if len(record) < 14 {
			continue
		}

		disposition := record[12]
		durationStr := record[9]

		switch disposition {
		case "ANSWERED":
			successfulCalls++
			// –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
			if duration, err := time.ParseDuration(durationStr + "s"); err == nil {
				totalDuration += duration

				if duration <= time.Duration(config.ShortCallThreshold)*time.Second {
					shortCalls++
					logShortCall(record, duration)
				}
			}

		case "NO ANSWER", "BUSY", "FAILED":
			failedCalls++
		}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	if shortCalls > 0 {
		log.Printf("üìû –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤: %d", shortCalls)
	}

	// –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	if successfulCalls > 0 {
		avgDuration := totalDuration / time.Duration(successfulCalls)
		log.Printf("üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤: %v", avgDuration.Truncate(time.Second))
	}

	statsMutex.Lock()
	systemStats.TotalCalls += int64(successfulCalls + failedCalls)
	statsMutex.Unlock()
}

// üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–î–û–†–û–í–¨–Ø SIP
func monitorSIPHealth() {
	ticker := time.NewTicker(5 * time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		sipStatus, err := getSIPStatusDetailed()
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è SIP: %v", err)
			continue
		}

		problems := analyzeSIPHealth(sipStatus)
		if len(problems) > 0 {
			logProblemsIntelligently(problems)
		}

		updateSIPMetrics(sipStatus)
	}
}

func analyzeSIPHealth(sipStatus []string) []ProblemCall {
	var problems []ProblemCall
	currentTime := time.Now().Format(time.RFC3339)

	for _, line := range sipStatus {
		if strings.Contains(line, "UNREACHABLE") {
			parts := strings.Fields(line)
			if len(parts) > 0 {
				peer := parts[0]
				problems = append(problems, ProblemCall{
					Timestamp: currentTime,
					Channel:   "SIP Peer",
					CallerID:  peer,
					Problem:   "SIP –ø–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
					Details:   fmt.Sprintf("–ü–∏—Ä %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤", peer),
					Severity:  "high",
				})
			}
		}

		if strings.Contains(line, "LAGGED") {
			parts := strings.Fields(line)
			if len(parts) > 0 {
				problems = append(problems, ProblemCall{
					Timestamp: currentTime,
					Channel:   "SIP Peer",
					CallerID:  parts[0],
					Problem:   "–í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ SIP",
					Details:   "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ SIP",
					Severity:  "medium",
				})
			}
		}
	}

	return problems
}

// üéØ –î–í–ò–ì–ê–¢–ï–õ–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
func runStatisticsEngine() {
	ticker := time.NewTicker(1 * time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		statsMutex.Lock()
		systemStats.Uptime = time.Since(systemStats.StartTime)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–±–ª–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
		hour := time.Now().Hour()
		systemStats.ProblemTrend[hour]++

		statsMutex.Unlock()

		// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		if time.Now().Minute()%10 == 0 { // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
			saveStatisticsSnapshot()
		}
	}
}

func saveStatisticsSnapshot() {
	statsMutex.RLock()
	defer statsMutex.RUnlock()

	data, err := json.MarshalIndent(systemStats, "", "  ")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		return
	}

	if err := os.WriteFile(statsFile, data, 0644); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
	}
}

// üéØ –ú–ï–ù–ï–î–ñ–ï–† –û–ü–û–í–ï–©–ï–ù–ò–ô
func runAlertManager() {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		statsMutex.RLock()
		recentProblems := systemStats.ProblemCalls
		statsMutex.RUnlock()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
		if shouldSendAlert(recentProblems) {
			sendAlert(recentProblems)
		}
	}
}

func shouldSendAlert(recentProblems int64) bool {
	alertMutex.Lock()
	defer alertMutex.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
	if time.Since(lastAlertSent) < 5*time.Minute {
		return false
	}

	// –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
	if recentProblems > 10 {
		lastAlertSent = time.Now()
		return true
	}

	return false
}

func sendAlert(problemCount int64) {
	log.Printf("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ %d –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤", problemCount)

	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email, SMS, webhook –∏ —Ç.–¥.
	if config.AlertEmail != "" {
		// sendEmailAlert(problemCount)
	}
}

// üéØ –°–ê–ú–û–ú–û–ù–ò–¢–û–†–ò–ù–ì
func runSelfMonitoring() {
	ticker := time.NewTicker(2 * time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		checkSystemHealth()
		optimizeResources()
	}
}

func checkSystemHealth() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
	var m runtime.MemStats
	runtime.ReadMemStats(&m)

	if m.Alloc > 100*1024*1024 { // 100MB
		log.Printf("‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: %.2f MB", float64(m.Alloc)/1024/1024)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä—É—Ç–∏–Ω
	if runtime.NumGoroutine() > 100 {
		log.Printf("‚ö†Ô∏è  –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä—É—Ç–∏–Ω: %d", runtime.NumGoroutine())
	}
}

func optimizeResources() {
	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞
	runtime.GC()

	// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	cleanupOldData()
}

func cleanupOldData() {
	patternsMutex.Lock()
	defer patternsMutex.Unlock()

	now := time.Now()
	for key, pattern := range callPatterns {
		if now.Sub(pattern.LastReset) > 24*time.Hour {
			delete(callPatterns, key)
		}
	}

	// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º
	for key, lastSeen := range problemHistory {
		if now.Sub(lastSeen) > 2*time.Hour {
			delete(problemHistory, key)
		}
	}
}

// üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
func getSystemLoad() (string, error) {
	cmd := exec.Command("uptime")
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}
	return strings.TrimSpace(string(output)), nil
}

func analyzeSystemImpact(systemLoad string, channels []string) []ProblemCall {
	// –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏
	var problems []ProblemCall

	if strings.Contains(systemLoad, "load average:") {
		// –ü–∞—Ä—Å–∏–º –Ω–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã
		parts := strings.Split(systemLoad, "load average:")
		if len(parts) > 1 {
			load := strings.TrimSpace(parts[1])

			// –ï—Å–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Å–æ–∫–∞—è –∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã
			if strings.Contains(load, "2.") || strings.Contains(load, "3.") {
				activeCalls := countActiveChannels(channels)
				if activeCalls > 0 {
					problems = append(problems, ProblemCall{
						Timestamp: time.Now().Format(time.RFC3339),
						Channel:   "System",
						CallerID:  "Monitor",
						Problem:   "–í—ã—Å–æ–∫–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞",
						Details:   fmt.Sprintf("–ù–∞–≥—Ä—É–∑–∫–∞: %s, –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: %d", load, activeCalls),
						Severity:  "medium",
					})
				}
			}
		}
	}

	return problems
}

func countActiveChannels(channels []string) int {
	count := 0
	for _, line := range channels {
		if isActiveCall(line) {
			count++
		}
	}
	return count
}

func predictPotentialIssues(channels []string) []ProblemCall {
	// –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	var predictions []ProblemCall

	activeCount := countActiveChannels(channels)

	// –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ
	if activeCount > 50 {
		predictions = append(predictions, ProblemCall{
			Timestamp: time.Now().Format(time.RFC3339),
			Channel:   "Predictive",
			CallerID:  "AI Engine",
			Problem:   "–í–æ–∑–º–æ–∂–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
			Details:   fmt.Sprintf("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ - –±–ª–∏–∑–∫–æ –∫ –ø—Ä–µ–¥–µ–ª—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", activeCount),
			Severity:  "low",
		})
	}

	return predictions
}

// üéØ –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° –ò API
func webDashboard(w http.ResponseWriter, r *http.Request) {
	html := `
    <!DOCTYPE html>
    <html>
    <head>
        <title>Asterisk Monitor Premium</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }
            .metric { background: #ecf0f1; margin: 10px 0; padding: 15px; border-radius: 5px; }
            .critical { border-left: 5px solid #e74c3c; }
            .warning { border-left: 5px solid #f39c12; }
            .info { border-left: 5px solid #3498db; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üéØ Asterisk Monitor Premium</h1>
            <p>Enterprise-grade –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
        </div>
        
        <div class="metric info">
            <h3>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <p>–í–µ—Ä—Å–∏—è: %s | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <span id="uptime"></span></p>
        </div>
        
        <div class="metric">
            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤</h3>
            <p>–í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: <span id="totalCalls">0</span> | –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: <span id="problemCalls">0</span></p>
        </div>
        
        <div class="metric">
            <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</h3>
            <p id="activeChannels">0</p>
        </div>
        
        <script>
            function updateStats() {
                fetch('/api/stats')
                    .then(r => r.json())
                    .then(data => {
                        document.getElementById('uptime').textContent = data.uptime;
                        document.getElementById('totalCalls').textContent = data.total_calls;
                        document.getElementById('problemCalls').textContent = data.problem_calls;
                        document.getElementById('activeChannels').textContent = data.current_channels;
                    });
            }
            
            setInterval(updateStats, 5000);
            updateStats();
        </script>
    </body>
    </html>
    `
	fmt.Fprintf(w, html, version)
}

// üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
func updateRealTimeMetrics(channels []string, problems []ProblemCall) {
	activeCount := countActiveChannels(channels)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	statsMutex.Lock()
	systemStats.CurrentChannels = activeCount
	systemStats.ProblemCalls += int64(len(problems))
	statsMutex.Unlock()
}

func updateQualityMetrics(metrics []QualityMetrics) {
	// –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
	for _, metric := range metrics {
		statsMutex.Lock()
		if metric.PacketLoss > config.PacketLossThreshold {
			systemStats.QualityIssues++
		}
		statsMutex.Unlock()
	}
}

func updateSIPMetrics(sipStatus []string) {
	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ SIP –ø–∏—Ä–æ–≤
	statsMutex.Lock()
	defer statsMutex.Unlock()

	for _, line := range sipStatus {
		if strings.Contains(line, "OK") {
			parts := strings.Fields(line)
			if len(parts) > 0 {
				systemStats.SIPStatus[parts[0]] = "OK"
			}
		} else if strings.Contains(line, "UNREACHABLE") {
			parts := strings.Fields(line)
			if len(parts) > 0 {
				systemStats.SIPStatus[parts[0]] = "UNREACHABLE"
			}
		}
	}
}

// üéØ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú
func logProblemsIntelligently(problems []ProblemCall) {
	for _, problem := range problems {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –Ω–µ–¥–∞–≤–Ω–æ
		problemKey := fmt.Sprintf("%s:%s:%s", problem.Channel, problem.Problem, problem.CallerID)

		if lastSeen, exists := problemHistory[problemKey]; exists {
			if time.Since(lastSeen) < 2*time.Minute {
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –Ω–µ–¥–∞–≤–Ω–æ
			}
		}

		problemHistory[problemKey] = time.Now()

		// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
		logEntry := fmt.Sprintf("[%s] [%s] –ü–†–û–ë–õ–ï–ú–ê: %s | –ö–∞–Ω–∞–ª: %s | CallerID: %s | –î–µ—Ç–∞–ª–∏: %s\n",
			problem.Timestamp, problem.Severity, problem.Problem, problem.Channel, problem.CallerID, problem.Details)

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥-—Ñ–∞–π–ª
		if file, err := os.OpenFile(logFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644); err == nil {
			file.WriteString(logEntry)
			file.Close()
		}

		// –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
		fmt.Print(logEntry)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
		statsMutex.Lock()
		systemStats.TopProblemTypes[problem.Problem]++
		statsMutex.Unlock()
	}
}

func logShortCall(record []string, duration time.Duration) {
	problem := ProblemCall{
		Timestamp: time.Now().Format(time.RFC3339),
		Channel:   record[1],
		CallerID:  record[2],
		Problem:   "–ö–æ—Ä–æ—Ç–∫–∏–π –≤—ã–∑–æ–≤",
		Details:   fmt.Sprintf("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v, –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: %s", duration, record[4]),
		Severity:  "medium",
		Duration:  int(duration.Seconds()),
	}

	logProblemsIntelligently([]ProblemCall{problem})
}

// üéØ –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ü–û–†–û–ì–û–í
type DynamicThresholds struct {
	Bubbling        int
	MaxCallDuration int
	PacketLoss      float64
}

func adjustThresholdsByTime() DynamicThresholds {
	now := time.Now()
	hour := now.Hour()

	thresholds := DynamicThresholds{
		Bubbling:        config.BubblingThreshold,
		MaxCallDuration: config.MaxCallDuration,
		PacketLoss:      config.PacketLossThreshold,
	}

	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
	switch {
	case hour >= 8 && hour <= 18: // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
		thresholds.Bubbling = 2     // –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
		thresholds.PacketLoss = 2.0 // –°—Ç—Ä–æ–∂–µ –∫ –∫–∞—á–µ—Å—Ç–≤—É

	case hour >= 22 || hour <= 6: // –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
		thresholds.Bubbling = 5     // –ú–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—á—å—é
		thresholds.PacketLoss = 8.0 // –î–æ–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à–µ –ø–æ—Ç–µ—Ä—å

	default: // –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è
		thresholds.Bubbling = 3
		thresholds.PacketLoss = 5.0
	}

	return thresholds
}

func getTimeOfDay() string {
	hour := time.Now().Hour()
	switch {
	case hour < 6:
		return "–Ω–æ—á—å"
	case hour < 12:
		return "—É—Ç—Ä–æ"
	case hour < 18:
		return "–¥–µ–Ω—å"
	default:
		return "–≤–µ—á–µ—Ä"
	}
}

// üéØ –û–°–ù–û–í–ù–´–ï –£–¢–ò–õ–ò–¢–´
func isActiveCall(line string) bool {
	upper := strings.ToUpper(line)
	return strings.Contains(upper, "UP") ||
		strings.Contains(upper, "RINGING") ||
		strings.Contains(upper, "DIALING") ||
		strings.Contains(upper, "ANSWERED")
}

func extractChannel(line string) string {
	parts := strings.Fields(line)
	if len(parts) > 0 {
		return parts[0]
	}
	return "unknown"
}

func extractCallerID(line string) string {
	// –ò—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ <number>
	if start := strings.Index(line, "<"); start != -1 {
		if end := strings.Index(line[start:], ">"); end != -1 {
			return line[start+1 : start+end]
		}
	}

	// –ò—â–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	re := regexp.MustCompile(`(\+\d+|\d{6,})`)
	if matches := re.FindStringSubmatch(line); len(matches) > 0 {
		return matches[0]
	}

	return "unknown"
}

func extractState(line string) string {
	states := []string{"RINGING", "UP", "BUSY", "FAILED", "CONGESTION", "ANSWERED", "DIALING"}
	upper := strings.ToUpper(line)
	for _, state := range states {
		if strings.Contains(upper, state) {
			return state
		}
	}
	return "UNKNOWN"
}

func extractDuration(line string) int {
	// –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	patterns := []struct {
		regex string
		mult  int
	}{
		{`(\d+)h\s*(\d+)m\s*(\d+)s`, 1},
		{`(\d+)m\s*(\d+)s`, 1},
		{`(\d+)s`, 1},
		{`Up\s+(\d+)s`, 1},
	}

	for _, pattern := range patterns {
		re := regexp.MustCompile(pattern.regex)
		if matches := re.FindStringSubmatch(line); len(matches) > 1 {
			switch len(matches) {
			case 4: // 1h 2m 3s
				h, _ := strconv.Atoi(matches[1])
				m, _ := strconv.Atoi(matches[2])
				s, _ := strconv.Atoi(matches[3])
				return h*3600 + m*60 + s
			case 3: // 2m 3s
				m, _ := strconv.Atoi(matches[1])
				s, _ := strconv.Atoi(matches[2])
				return m*60 + s
			case 2: // 45s
				s, _ := strconv.Atoi(matches[1])
				return s
			}
		}
	}

	return 0
}

// üéØ –û–ë–ù–û–í–õ–Ø–ï–ú updateStats –î–õ–Ø –ü–û–î–î–ï–†–ñ–ö–ò –ù–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò
func updateStats(problemsCount int) {
	statsMutex.Lock()
	defer statsMutex.Unlock()

	systemStats.ProblemCalls += int64(problemsCount)
	systemStats.LastProblemTime = time.Now()
}

func getRTPQuality() ([]QualityMetrics, error) {
	var metrics []QualityMetrics

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RTP
	cmd := exec.Command("asterisk", "-rx", "rtp show stats")
	output, err := cmd.Output()
	if err != nil {
		return metrics, err
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.Contains(line, "RTP") && (strings.Contains(line, "loss") || strings.Contains(line, "jitter")) {
			metric := parseRTPLine(line)
			if metric.PacketLoss > 0 || metric.Jitter > 0 {
				metrics = append(metrics, metric)
			}
		}
	}

	return metrics, nil
}

func parseRTPLine(line string) QualityMetrics {
	metric := QualityMetrics{
		Timestamp: time.Now(),
		Channel:   "unknown",
	}

	// –ü–∞—Ä—Å–∏–º –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤
	re := regexp.MustCompile(`loss[=:]?\s*([\d.]+)%?`)
	if matches := re.FindStringSubmatch(line); len(matches) > 1 {
		metric.PacketLoss, _ = strconv.ParseFloat(matches[1], 64)
	}

	// –ü–∞—Ä—Å–∏–º –¥–∂–∏—Ç—Ç–µ—Ä
	re = regexp.MustCompile(`jitter[=:]?\s*([\d.]+)\s*ms?`)
	if matches := re.FindStringSubmatch(line); len(matches) > 1 {
		metric.Jitter, _ = strconv.ParseFloat(matches[1], 64)
	}

	// –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
	re = regexp.MustCompile(`(SIP/\S+|PJSIP/\S+)`)
	if matches := re.FindStringSubmatch(line); len(matches) > 1 {
		metric.Channel = matches[1]
	}

	// –†–∞—Å—á–µ—Ç MOS
	metric.MOS = calculateAdvancedMOS(metric.PacketLoss, metric.Jitter)

	return metric
}

func analyzeQuality(metrics []QualityMetrics) []ProblemCall {
	var problems []ProblemCall
	currentTime := time.Now().Format(time.RFC3339)

	for _, metric := range metrics {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ—Ä—å –ø–∞–∫–µ—Ç–æ–≤
		if metric.PacketLoss > config.PacketLossThreshold {
			problems = append(problems, ProblemCall{
				Timestamp: currentTime,
				Channel:   metric.Channel,
				CallerID:  "RTP Monitor",
				Problem:   "–í—ã—Å–æ–∫–∏–µ –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤",
				Details: fmt.Sprintf("–ü–æ—Ç–µ—Ä–∏: %.1f%% (>%.1f%%), MOS: %.2f",
					metric.PacketLoss, config.PacketLossThreshold, metric.MOS),
				Severity:   "high",
				PacketLoss: metric.PacketLoss,
				MOS:        metric.MOS,
			})
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∂–∏—Ç—Ç–µ—Ä–∞
		if metric.Jitter > config.JitterThreshold {
			problems = append(problems, ProblemCall{
				Timestamp: currentTime,
				Channel:   metric.Channel,
				CallerID:  "RTP Monitor",
				Problem:   "–í—ã—Å–æ–∫–∏–π –¥–∂–∏—Ç—Ç–µ—Ä",
				Details: fmt.Sprintf("–î–∂–∏—Ç—Ç–µ—Ä: %.1f –º—Å (>%.1f –º—Å), MOS: %.2f",
					metric.Jitter, config.JitterThreshold, metric.MOS),
				Severity: "medium",
				Jitter:   metric.Jitter,
				MOS:      metric.MOS,
			})
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–∞
		if metric.MOS < 3.0 {
			problems = append(problems, ProblemCall{
				Timestamp: currentTime,
				Channel:   metric.Channel,
				CallerID:  "RTP Monitor",
				Problem:   "–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–∞",
				Details:   fmt.Sprintf("MOS: %.2f (—Ç—Ä–µ–±—É–µ—Ç—Å—è >3.0)", metric.MOS),
				Severity:  "high",
				MOS:       metric.MOS,
			})
		}
	}

	return problems
}

func detectAnomalies(records [][]string) {
	// –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ CDR –¥–∞–Ω–Ω—ã—Ö
	totalCalls := len(records)
	if totalCalls == 0 {
		return
	}

	failedCalls := 0
	shortCalls := 0

	for _, record := range records {
		if len(record) < 14 {
			continue
		}

		disposition := record[12]
		durationStr := record[9]

		if disposition != "ANSWERED" {
			failedCalls++
		} else if duration, err := time.ParseDuration(durationStr + "s"); err == nil {
			if duration <= time.Duration(config.ShortCallThreshold)*time.Second {
				shortCalls++
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
	failureRate := float64(failedCalls) / float64(totalCalls) * 100
	shortCallRate := float64(shortCalls) / float64(totalCalls) * 100

	if failureRate > 20.0 { // –ë–æ–ª–µ–µ 20% –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
		log.Printf("üö® –ê–ù–û–ú–ê–õ–ò–Ø: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: %.1f%%", failureRate)
	}

	if shortCallRate > 30.0 { // –ë–æ–ª–µ–µ 30% –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤
		log.Printf("üö® –ê–ù–û–ú–ê–õ–ò–Ø: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤: %.1f%%", shortCallRate)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	statsMutex.Lock()
	systemStats.QualityIssues += int64(failedCalls)
	statsMutex.Unlock()
}

func analyzeTrends(records [][]string) {
	// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	hour := time.Now().Hour()
	currentCalls := len(records)

	// –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —á–∞—Å–æ–º
	statsMutex.Lock()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞
	if hour < len(systemStats.ProblemTrend) {
		previousCalls := systemStats.ProblemTrend[hour]

		// –ï—Å–ª–∏ —Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç –≤—ã–∑–æ–≤–æ–≤
		if currentCalls > 0 && previousCalls > 0 {
			growth := float64(currentCalls) / float64(previousCalls)
			if growth > 2.0 { // –†–æ—Å—Ç –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞
				log.Printf("üìà –¢–†–ï–ù–î: –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –≤—ã–∑–æ–≤–æ–≤ –≤ %d:00 - –≤ %.1f —Ä–∞–∑ –±–æ–ª—å—à–µ —á–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å",
					hour, growth)
			}
		}

		systemStats.ProblemTrend[hour] = currentCalls
	}

	statsMutex.Unlock()
}