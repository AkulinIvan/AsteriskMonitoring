package main

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"os"
	"os/exec"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"time"
)

const (
	logFile    = "/var/log/asterisk-monitor/calls_problem_online.log"
	cdrFile    = "/var/log/asterisk/cdr-csv/Master.csv"
	configFile = "/etc/asterisk-monitor/config.conf"

	// AMI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	amiHost     = "localhost"
	amiPort     = "5038"
	amiUsername = "admin"
	amiPassword = ",fhf,firf"
)

// AMIClient –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk Manager Interface
type AMIClient struct {
	conn      net.Conn
	events    chan string
	connected bool
	reconnect chan bool
	stop      chan bool
}

// ProblemCall –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –≤—ã–∑–æ–≤
type ProblemCall struct {
	Timestamp string
	Channel   string
	CallerID  string
	Problem   string
	Details   string
	Severity  string
}

// ActiveCall –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã
type ActiveCall struct {
	Channel     string
	CallerID    string
	Destination string
	State       string
	StartTime   time.Time
	LastUpdate  time.Time
}

// QualityMetrics –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏
type QualityMetrics struct {
	Channel    string
	PacketLoss float64
	Jitter     float64
	Latency    int
	MOS        float64
	RTPErrors  int
	Timestamp  time.Time
}

// CallPattern –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –≤—ã–∑–æ–≤–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–ª—å–∫–∞–Ω–∏—è
type CallPattern struct {
	Channel      string
	CallerID     string
	RingCount    int
	LastState    string
	StateChanges []time.Time
	ShortCalls   int
	LastReset    time.Time
}

// Config –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
type Config struct {
	MaxRingDuration     int
	MaxCallDuration     int
	BubblingThreshold   int
	PacketLossThreshold float64
	JitterThreshold     float64
	ShortCallThreshold  int
	AMIUsername         string
	AMIPassword         string
}

var (
	activeCalls       = make(map[string]*ActiveCall)
	activeMutex       = &sync.Mutex{}
	callPatterns      = make(map[string]*CallPattern)
	patternsMutex     = &sync.Mutex{}
	config            Config
	monitoring        = false
	lastAsteriskCheck = time.Now()
	problemHistory    = make(map[string]time.Time)
	amiClient         *AMIClient
)

func main() {
	fmt.Println("Asterisk Reactive Monitor –∑–∞–ø—É—â–µ–Ω...")
	fmt.Printf("–õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤: %s\n", logFile)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := loadConfig(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", err)
		config = Config{
			MaxRingDuration:     30,
			MaxCallDuration:     3600,
			BubblingThreshold:   3,
			PacketLossThreshold: 5.0,
			JitterThreshold:     50.0,
			ShortCallThreshold:  3,
			AMIUsername:         "admin",
			AMIPassword:         "password",
		}
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll("/var/log/asterisk-monitor", 0755); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AMI –∫–ª–∏–µ–Ω—Ç
	amiClient = NewAMIClient()

	// –ó–∞–ø—É—Å–∫–∞–µ–º AMI –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
	go amiClient.Start()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
	go monitorActiveCalls()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
	go backgroundMonitoring()

	fmt.Println("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
	fmt.Println("üìû –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–≤–æ–Ω–∫–∞—Ö")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	select {}
}

// NewAMIClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π AMI –∫–ª–∏–µ–Ω—Ç
func NewAMIClient() *AMIClient {
	return &AMIClient{
		events:    make(chan string, 100),
		reconnect: make(chan bool, 1),
		stop:      make(chan bool, 1),
		connected: false,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç AMI –∫–ª–∏–µ–Ω—Ç
func (a *AMIClient) Start() {
	for {
		select {
		case <-a.stop:
			return
		default:
			if err := a.connect(); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AMI: %v. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...", err)
				time.Sleep(10 * time.Second)
				continue
			}

			// –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
			a.connected = true
			log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ AMI")

			// –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
			if err := a.readEvents(); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π AMI: %v", err)
				a.connected = false
				a.conn.Close()
				time.Sleep(5 * time.Second)
			}
		}
	}
}

// connect —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å AMI
func (a *AMIClient) connect() error {
	log.Println("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Asterisk Manager Interface...")

	conn, err := net.Dial("tcp", amiHost+":"+amiPort)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
	conn.SetReadDeadline(time.Time{}) // –ë–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ AMI
	authCommand := fmt.Sprintf("Action: Login\r\nUsername: %s\r\nSecret: %s\r\nEvents: on\r\n\r\n",
		config.AMIUsername, config.AMIPassword)

	if _, err := conn.Write([]byte(authCommand)); err != nil {
		conn.Close()
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %v", err)
	}

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	reader := bufio.NewReader(conn)
	response := ""
	for i := 0; i < 10; i++ { // –ß–∏—Ç–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞
		line, err := reader.ReadString('\n')
		if err != nil {
			conn.Close()
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
		}
		response += line

		if strings.Contains(line, "Message: Authentication accepted") {
			a.conn = conn
			return nil
		}

		if strings.Contains(line, "Message: Authentication failed") {
			conn.Close()
			return fmt.Errorf("–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
		}
	}

	conn.Close()
	return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
}

// readEvents —á–∏—Ç–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ AMI
func (a *AMIClient) readEvents() error {
	reader := bufio.NewReader(a.conn)
	buffer := ""

	for {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
		a.conn.SetReadDeadline(time.Now().Add(30 * time.Second))

		line, err := reader.ReadString('\n')
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
		}

		buffer += line

		// –°–æ–±—ã—Ç–∏—è —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
		if strings.TrimSpace(line) == "" && strings.TrimSpace(buffer) != "" {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª
			select {
			case a.events <- buffer:
				// –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
			default:
				log.Printf("‚ö†Ô∏è  –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π AMI")
			}
			buffer = ""
		}
	}
}

// processEvents –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è AMI
func (a *AMIClient) processEvents() {
	for event := range a.events {
		go handleAMIEvent(event)
	}
}

func loadConfig() error {
	// –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
	data, err := os.ReadFile(configFile)
	if err != nil {
		return err
	}

	lines := strings.Split(string(data), "\n")
	for _, line := range lines {
		if strings.HasPrefix(line, "#") || strings.TrimSpace(line) == "" {
			continue
		}

		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		switch key {
		case "max_ring_duration":
			config.MaxRingDuration, _ = strconv.Atoi(value)
		case "max_call_duration":
			config.MaxCallDuration, _ = strconv.Atoi(value)
		case "bubbling_threshold":
			config.BubblingThreshold, _ = strconv.Atoi(value)
		case "packet_loss_threshold":
			config.PacketLossThreshold, _ = strconv.ParseFloat(value, 64)
		case "jitter_threshold":
			config.JitterThreshold, _ = strconv.ParseFloat(value, 64)
		case "short_call_threshold":
			config.ShortCallThreshold, _ = strconv.Atoi(value)
		case "ami_username":
			config.AMIUsername = value
		case "ami_password":
			config.AMIPassword = value
		}
	}

	return nil
}

// handleAMIEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç AMI
func handleAMIEvent(event string) {
	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
	if strings.Contains(event, "Event: Newchannel") ||
		strings.Contains(event, "Event: Hangup") ||
		strings.Contains(event, "Event: Bridge") {
		log.Printf("üìû AMI Event: %s", getEventSummary(event))
	}

	// –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–∑–æ–≤–∞
	if strings.Contains(event, "Event: Newchannel") {
		extractCallInfo(event)
	}

	// –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–Ω—è—Ç–∏–µ —Ç—Ä—É–±–∫–∏
	if strings.Contains(event, "Event: Bridge") && strings.Contains(event, "BridgeState: Link") {
		startCallMonitoring()
	}

	// –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
	if strings.Contains(event, "Event: Newstate") {
		handleCallState(event)
	}

	// –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
	if strings.Contains(event, "Event: Hangup") {
		handleCallEnd(event)
	}
}

// extractCallInfo –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –≤—ã–∑–æ–≤–µ
func extractCallInfo(event string) {
	channel := extractValue(event, "Channel: ")
	callerID := extractValue(event, "CallerIDNum: ")

	if channel != "" {
		activeMutex.Lock()
		activeCalls[channel] = &ActiveCall{
			Channel:    channel,
			CallerID:   callerID,
			State:      "Started",
			StartTime:  time.Now(),
			LastUpdate: time.Now(),
		}
		activeMutex.Unlock()

		log.Printf("üìû –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤: %s -> %s", callerID, channel)
	}
}

// handleCallState –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–∑–æ–≤–∞
func handleCallState(event string) {
	channel := extractValue(event, "Channel: ")
	state := extractValue(event, "ChannelStateDesc: ")

	if channel != "" && state != "" {
		activeMutex.Lock()
		if call, exists := activeCalls[channel]; exists {
			call.State = state
			call.LastUpdate = time.Now()

			// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞
			if state == "Ringing" || state == "Up" {
				startCallMonitoring()
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤—ã–∑–æ–≤–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–ª—å–∫–∞–Ω–∏—è
			updateCallPattern(channel, call.CallerID, state)
		}
		activeMutex.Unlock()
	}
}

// handleCallEnd –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
func handleCallEnd(event string) {
	channel := extractValue(event, "Channel: ")
	cause := extractValue(event, "Cause: ")

	if channel != "" {
		activeMutex.Lock()
		if call, exists := activeCalls[channel]; exists {
			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
			if cause != "0" && cause != "16" { // 0 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, 16 - –æ—Ç–≤–µ—Ç
				problem := ProblemCall{
					Timestamp: time.Now().Format("2006-01-02 15:04:05"),
					Channel:   call.Channel,
					CallerID:  call.CallerID,
					Problem:   "–ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞",
					Details:   fmt.Sprintf("–ü—Ä–∏—á–∏–Ω–∞: %s", getCauseDescription(cause)),
					Severity:  "medium",
				}
				writeProblemCall(problem)
			}

			// –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
			delete(activeCalls, channel)
			log.Printf("üìû –í—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: %s", channel)
		}
		activeMutex.Unlock()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã
		checkActiveCalls()
	}
}

// updateCallPattern –æ–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–ª—å–∫–∞–Ω–∏—è
func updateCallPattern(channel, callerID, state string) {
	patternsMutex.Lock()
	defer patternsMutex.Unlock()

	key := callerID + ":" + channel
	pattern, exists := callPatterns[key]
	if !exists {
		pattern = &CallPattern{
			Channel:      channel,
			CallerID:     callerID,
			StateChanges: []time.Time{},
			LastReset:    time.Now(),
		}
		callPatterns[key] = pattern
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞
	if time.Since(pattern.LastReset) > time.Hour {
		pattern.RingCount = 0
		pattern.ShortCalls = 0
		pattern.StateChanges = []time.Time{}
		pattern.LastReset = time.Now()
	}

	if state != pattern.LastState {
		pattern.StateChanges = append(pattern.StateChanges, time.Now())
		pattern.LastState = state

		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ ringing —Å–æ—Å—Ç–æ—è–Ω–∏–π
		if state == "Ringing" {
			pattern.RingCount++

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É–ª—å–∫–∞–Ω–∏–µ
			if pattern.RingCount >= config.BubblingThreshold {
				problem := ProblemCall{
					Timestamp: time.Now().Format("2006-01-02 15:04:05"),
					Channel:   channel,
					CallerID:  callerID,
					Problem:   "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±—É–ª—å–∫–∞–Ω–∏–µ",
					Details:   fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: %d", pattern.RingCount),
					Severity:  "critical",
				}
				writeProblemCall(problem)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
				pattern.RingCount = 0
			}
		}
	}
}

// startCallMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func startCallMonitoring() {
	if !monitoring {
		log.Println("üöÄ –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–∑–æ–≤–æ–≤")
		monitoring = true

		// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞
		go intensiveMonitoring()
	}
}

// stopCallMonitoring –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func stopCallMonitoring() {
	if monitoring {
		log.Println("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
		monitoring = false
	}
}

// intensiveMonitoring –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
func intensiveMonitoring() {
	ticker := time.NewTicker(5 * time.Second) // –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–æ–≤
	defer ticker.Stop()

	for range ticker.C {
		if !monitoring {
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
		checkActiveCallsForProblems()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ RTP
		checkRTPQuality()
	}
}

// checkActiveCalls –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
func checkActiveCalls() {
	activeMutex.Lock()
	hasActiveCalls := len(activeCalls) > 0
	activeMutex.Unlock()

	if !hasActiveCalls && monitoring {
		// –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
		time.AfterFunc(10*time.Second, func() {
			activeMutex.Lock()
			stillNoCalls := len(activeCalls) == 0
			activeMutex.Unlock()

			if stillNoCalls {
				stopCallMonitoring()
			}
		})
	}
}

// checkActiveCallsForProblems –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
func checkActiveCallsForProblems() {
	activeMutex.Lock()
	defer activeMutex.Unlock()

	currentTime := time.Now()

	for channel, call := range activeCalls {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
		if call.State == "Ringing" {
			ringDuration := currentTime.Sub(call.StartTime).Seconds()
			if ringDuration > float64(config.MaxRingDuration) {
				problem := ProblemCall{
					Timestamp: currentTime.Format("2006-01-02 15:04:05"),
					Channel:   channel,
					CallerID:  call.CallerID,
					Problem:   "–î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞",
					Details:   fmt.Sprintf("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.0f —Å–µ–∫", ringDuration),
					Severity:  "medium",
				}
				writeProblemCall(problem)
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–∏–µ –≤—ã–∑–æ–≤—ã
		if call.State == "Up" {
			callDuration := currentTime.Sub(call.StartTime).Seconds()
			if callDuration > float64(config.MaxCallDuration) {
				problem := ProblemCall{
					Timestamp: currentTime.Format("2006-01-02 15:04:05"),
					Channel:   channel,
					CallerID:  call.CallerID,
					Problem:   "–û—á–µ–Ω—å –¥–æ–ª–≥–∏–π –≤—ã–∑–æ–≤",
					Details:   fmt.Sprintf("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.0f —Å–µ–∫", callDuration),
					Severity:  "low",
				}
				writeProblemCall(problem)
			}
		}
	}
}

// checkRTPQuality –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ RTP
func checkRTPQuality() {
	if !monitoring {
		return
	}

	qualityMetrics, err := getRTPQuality()
	if err != nil {
		return
	}

	for _, metric := range qualityMetrics {
		if metric.PacketLoss > config.PacketLossThreshold {
			problem := ProblemCall{
				Timestamp: time.Now().Format("2006-01-02 15:04:05"),
				Channel:   metric.Channel,
				CallerID:  "RTP Monitor",
				Problem:   "–í—ã—Å–æ–∫–∏–µ –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞",
				Details:   fmt.Sprintf("–ü–æ—Ç–µ—Ä–∏: %.2f%%, MOS: %.2f", metric.PacketLoss, metric.MOS),
				Severity:  "high",
			}
			writeProblemCall(problem)
		}
	}
}

// getRTPQuality –ø–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ RTP
func getRTPQuality() ([]QualityMetrics, error) {
	var metrics []QualityMetrics

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã
	cmd := exec.Command("asterisk", "-rx", "core show channels")
	output, err := cmd.Output()
	if err != nil {
		return metrics, err
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
	if strings.Contains(string(output), "0 active channels") {
		return metrics, nil
	}

	// –ü–æ–ª—É—á–∞–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
	cmd = exec.Command("asterisk", "-rx", "rtp show stats")
	output, err = cmd.Output()
	if err != nil {
		return metrics, err
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.Contains(line, "RTP Reader") {
			metrics = append(metrics, parseRTPLine(line))
		}
	}

	return metrics, nil
}

// parseRTPLine –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func parseRTPLine(line string) QualityMetrics {
	metric := QualityMetrics{
		Timestamp: time.Now(),
	}

	re := regexp.MustCompile(`loss:(\d+\.\d+)%`)
	if matches := re.FindStringSubmatch(line); len(matches) > 1 {
		metric.PacketLoss, _ = strconv.ParseFloat(matches[1], 64)
	}

	re = regexp.MustCompile(`jitter:(\d+\.\d+)`)
	if matches := re.FindStringSubmatch(line); len(matches) > 1 {
		metric.Jitter, _ = strconv.ParseFloat(matches[1], 64)
	}

	// –†–∞—Å—á–µ—Ç MOS –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ—Ä—å –∏ –¥–∂–∏—Ç—Ç–µ—Ä–∞
	metric.MOS = calculateMOS(metric.PacketLoss, metric.Jitter)

	return metric
}

// calculateMOS —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç MOS score
func calculateMOS(packetLoss, jitter float64) float64 {
	baseMOS := 4.2
	lossPenalty := packetLoss * 0.1
	jitterPenalty := jitter * 0.001

	mos := baseMOS - lossPenalty - jitterPenalty
	if mos < 1.0 {
		return 1.0
	}
	if mos > 4.5 {
		return 4.5
	}
	return mos
}

// backgroundMonitoring —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
func backgroundMonitoring() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π AMI
	go amiClient.processEvents()

	ticker := time.NewTicker(60 * time.Second) // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
	defer ticker.Stop()

	for range ticker.C {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º SIP —Å—Ç–∞—Ç—É—Å —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
		if time.Since(lastAsteriskCheck) > 5*time.Minute {
			checkSIPStatus()
			lastAsteriskCheck = time.Now()
		}

		// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—ã–∑–æ–≤–æ–≤
		cleanupOldCalls()
	}
}

// checkSIPStatus –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å SIP –ø–∏—Ä–æ–≤
func checkSIPStatus() {
	sipStatus, err := getSIPStatus()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ SIP: %v", err)
		return
	}

	problems := analyzeSIPStatus(sipStatus)
	for _, problem := range problems {
		writeProblemCall(problem)
	}
}

// getSIPStatus –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å SIP –ø–∏—Ä–æ–≤
func getSIPStatus() ([]string, error) {
	cmd := exec.Command("asterisk", "-rx", "sip show peers")
	output, err := cmd.Output()
	if err != nil {
		return nil, err
	}
	return strings.Split(string(output), "\n"), nil
}

// analyzeSIPStatus –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å SIP –ø–∏—Ä–æ–≤
func analyzeSIPStatus(sipStatus []string) []ProblemCall {
	var problems []ProblemCall
	currentTime := time.Now().Format("2006-01-02 15:04:05")

	for _, line := range sipStatus {
		if strings.Contains(line, "UNREACHABLE") || strings.Contains(line, "UNKNOWN") {
			parts := strings.Fields(line)
			if len(parts) > 0 {
				problems = append(problems, ProblemCall{
					Timestamp: currentTime,
					Channel:   "SIP Peer",
					CallerID:  parts[0],
					Problem:   "SIP –ø–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
					Details:   line,
					Severity:  "high",
				})
			}
		}
	}

	return problems
}

// cleanupOldCalls –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–∑–æ–≤–∞—Ö
func cleanupOldCalls() {
	patternsMutex.Lock()
	defer patternsMutex.Unlock()

	currentTime := time.Now()
	for key, pattern := range callPatterns {
		if currentTime.Sub(pattern.LastReset) > 24*time.Hour {
			delete(callPatterns, key)
		}
	}
}

// monitorActiveCalls —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤—ã–∑–æ–≤–æ–≤
func monitorActiveCalls() {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		activeMutex.Lock()
		currentTime := time.Now()

		for channel, call := range activeCalls {
			// –£–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
			if currentTime.Sub(call.LastUpdate) > 5*time.Minute {
				delete(activeCalls, channel)
				log.Printf("–£–¥–∞–ª–µ–Ω –∑–∞–≤–∏—Å—à–∏–π –≤—ã–∑–æ–≤: %s", channel)
			}
		}

		activeMutex.Unlock()
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func extractValue(event, key string) string {
	if idx := strings.Index(event, key); idx != -1 {
		start := idx + len(key)
		end := strings.Index(event[start:], "\r")
		if end == -1 {
			end = len(event)
		} else {
			end = start + end
		}
		return strings.TrimSpace(event[start:end])
	}
	return ""
}

func getEventSummary(event string) string {
	eventType := extractValue(event, "Event: ")
	channel := extractValue(event, "Channel: ")
	callerID := extractValue(event, "CallerIDNum: ")

	return fmt.Sprintf("%s - Channel: %s, CallerID: %s", eventType, channel, callerID)
}

func getCauseDescription(cause string) string {
	causeMap := map[string]string{
		"1":  "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä",
		"3":  "–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é",
		"16": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ",
		"17": "–ó–∞–Ω—è—Ç–æ",
		"18": "–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞",
		"19": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞",
		"21": "–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
		"34": "–ù–µ—Ç –∫–∞–Ω–∞–ª–∞",
	}

	if desc, exists := causeMap[cause]; exists {
		return desc
	}
	return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: " + cause
}

func writeProblemCall(problem ProblemCall) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –Ω–µ–¥–∞–≤–Ω–æ
	problemKey := problem.Channel + ":" + problem.Problem
	if lastSeen, exists := problemHistory[problemKey]; exists {
		if time.Since(lastSeen) < 2*time.Minute {
			return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –Ω–µ–¥–∞–≤–Ω–æ
		}
	}
	problemHistory[problemKey] = time.Now()

	file, err := os.OpenFile(logFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %v", err)
		return
	}
	defer file.Close()

	logEntry := fmt.Sprintf("[%s] [%s] –ü–†–û–ë–õ–ï–ú–ê: %s | –ö–∞–Ω–∞–ª: %s | CallerID: %s | –î–µ—Ç–∞–ª–∏: %s\n",
		problem.Timestamp, problem.Severity, problem.Problem, problem.Channel, problem.CallerID, problem.Details)

	if _, err := file.WriteString(logEntry); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: %v", err)
	}

	fmt.Print(logEntry)
}
